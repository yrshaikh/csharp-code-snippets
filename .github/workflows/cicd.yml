# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  NETCORE_VERSION: '3.1.402'
  GIT_REPO_ROOT: src
  SOLUTION_FILE: Snippets.sln
  UNITTEST_PROJECT_PATH: Snippets/Snippets.UnitTests/Snippets.UnitTests.csproj

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ env.NETCORE_VERSION }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.NETCORE_VERSION }}
      - name: Restore packages
        working-directory: ${{ env.GIT_REPO_ROOT }}
        run: dotnet restore ${{ env.SOLUTION_FILE }}
      - name: Build app
        working-directory: ${{ env.GIT_REPO_ROOT }}
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Debug --no-restore
      - name: Run Unit Tests
        working-directory: ${{ env.GIT_REPO_ROOT }}
        run: dotnet test ${{ env.UNITTEST_PROJECT_PATH }} --no-build --collect:"XPlat Code Coverage"
        run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Debug --no-restore
